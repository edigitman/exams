/**
 * This class is generated by jOOQ
 */
package ro.ghasachi.bt.persistence.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ro.ghasachi.bt.persistence.Keys;
import ro.ghasachi.bt.persistence.Public;
import ro.ghasachi.bt.persistence.tables.records.ExamRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exam extends TableImpl<ExamRecord> {

	private static final long serialVersionUID = -1677399911;

	/**
	 * The reference instance of <code>PUBLIC.EXAM</code>
	 */
	public static final Exam EXAM = new Exam();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ExamRecord> getRecordType() {
		return ExamRecord.class;
	}

	/**
	 * The column <code>PUBLIC.EXAM.ID</code>.
	 */
	public final TableField<ExamRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.EXAM.DESCRIPTION</code>.
	 */
	public final TableField<ExamRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>PUBLIC.EXAM.NAME</code>.
	 */
	public final TableField<ExamRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>PUBLIC.EXAM.PROFESSOR_ID</code>.
	 */
	public final TableField<ExamRecord, Long> PROFESSOR_ID = createField("PROFESSOR_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>PUBLIC.EXAM</code> table reference
	 */
	public Exam() {
		this("EXAM", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.EXAM</code> table reference
	 */
	public Exam(String alias) {
		this(alias, EXAM);
	}

	private Exam(String alias, Table<ExamRecord> aliased) {
		this(alias, aliased, null);
	}

	private Exam(String alias, Table<ExamRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ExamRecord, Long> getIdentity() {
		return Keys.IDENTITY_EXAM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ExamRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_2;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ExamRecord>> getKeys() {
		return Arrays.<UniqueKey<ExamRecord>>asList(Keys.CONSTRAINT_2);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ExamRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ExamRecord, ?>>asList(Keys.FK_A9G3SSSO96F6U0TEMYHDIE6X6);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Exam as(String alias) {
		return new Exam(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Exam rename(String name) {
		return new Exam(name, null);
	}
}
