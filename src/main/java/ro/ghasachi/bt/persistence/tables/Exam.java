/**
 * This class is generated by jOOQ
 */
package ro.ghasachi.bt.persistence.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ro.ghasachi.bt.persistence.Keys;
import ro.ghasachi.bt.persistence.Mydb;
import ro.ghasachi.bt.persistence.tables.records.ExamRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exam extends TableImpl<ExamRecord> {

	private static final long serialVersionUID = -112236937;

	/**
	 * The reference instance of <code>mydb.exam</code>
	 */
	public static final Exam EXAM = new Exam();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ExamRecord> getRecordType() {
		return ExamRecord.class;
	}

	/**
	 * The column <code>mydb.exam.id</code>.
	 */
	public final TableField<ExamRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>mydb.exam.name</code>.
	 */
	public final TableField<ExamRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>mydb.exam.userid</code>.
	 */
	public final TableField<ExamRecord, Integer> USERID = createField("userid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>mydb.exam.dificulty</code>.
	 */
	public final TableField<ExamRecord, String> DIFICULTY = createField("dificulty", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

	/**
	 * The column <code>mydb.exam.datecreated</code>.
	 */
	public final TableField<ExamRecord, Timestamp> DATECREATED = createField("datecreated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>mydb.exam</code> table reference
	 */
	public Exam() {
		this("exam", null);
	}

	/**
	 * Create an aliased <code>mydb.exam</code> table reference
	 */
	public Exam(String alias) {
		this(alias, EXAM);
	}

	private Exam(String alias, Table<ExamRecord> aliased) {
		this(alias, aliased, null);
	}

	private Exam(String alias, Table<ExamRecord> aliased, Field<?>[] parameters) {
		super(alias, Mydb.MYDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ExamRecord, Integer> getIdentity() {
		return Keys.IDENTITY_EXAM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ExamRecord> getPrimaryKey() {
		return Keys.KEY_EXAM_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ExamRecord>> getKeys() {
		return Arrays.<UniqueKey<ExamRecord>>asList(Keys.KEY_EXAM_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ExamRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ExamRecord, ?>>asList(Keys.PROFID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Exam as(String alias) {
		return new Exam(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Exam rename(String name) {
		return new Exam(name, null);
	}
}
