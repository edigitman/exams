/**
 * This class is generated by jOOQ
 */
package ro.ghasachi.bt.persistence.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ro.ghasachi.bt.persistence.Keys;
import ro.ghasachi.bt.persistence.Mydb;
import ro.ghasachi.bt.persistence.tables.records.ExaminstanceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Examinstance extends TableImpl<ExaminstanceRecord> {

	private static final long serialVersionUID = 1674134976;

	/**
	 * The reference instance of <code>mydb.examinstance</code>
	 */
	public static final Examinstance EXAMINSTANCE = new Examinstance();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ExaminstanceRecord> getRecordType() {
		return ExaminstanceRecord.class;
	}

	/**
	 * The column <code>mydb.examinstance.id</code>.
	 */
	public final TableField<ExaminstanceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>mydb.examinstance.name</code>.
	 */
	public final TableField<ExaminstanceRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * The column <code>mydb.examinstance.status</code>.
	 */
	public final TableField<ExaminstanceRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mydb.examinstance.startdate</code>.
	 */
	public final TableField<ExaminstanceRecord, Timestamp> STARTDATE = createField("startdate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>mydb.examinstance.enddate</code>.
	 */
	public final TableField<ExaminstanceRecord, Timestamp> ENDDATE = createField("enddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>mydb.examinstance.points</code>.
	 */
	public final TableField<ExaminstanceRecord, Long> POINTS = createField("points", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>mydb.examinstance.examid</code>.
	 */
	public final TableField<ExaminstanceRecord, Integer> EXAMID = createField("examid", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mydb.examinstance.egroupid</code>.
	 */
	public final TableField<ExaminstanceRecord, Integer> EGROUPID = createField("egroupid", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mydb.examinstance.datecreated</code>.
	 */
	public final TableField<ExaminstanceRecord, Timestamp> DATECREATED = createField("datecreated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>mydb.examinstance</code> table reference
	 */
	public Examinstance() {
		this("examinstance", null);
	}

	/**
	 * Create an aliased <code>mydb.examinstance</code> table reference
	 */
	public Examinstance(String alias) {
		this(alias, EXAMINSTANCE);
	}

	private Examinstance(String alias, Table<ExaminstanceRecord> aliased) {
		this(alias, aliased, null);
	}

	private Examinstance(String alias, Table<ExaminstanceRecord> aliased, Field<?>[] parameters) {
		super(alias, Mydb.MYDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ExaminstanceRecord, Integer> getIdentity() {
		return Keys.IDENTITY_EXAMINSTANCE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ExaminstanceRecord> getPrimaryKey() {
		return Keys.KEY_EXAMINSTANCE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ExaminstanceRecord>> getKeys() {
		return Arrays.<UniqueKey<ExaminstanceRecord>>asList(Keys.KEY_EXAMINSTANCE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ExaminstanceRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ExaminstanceRecord, ?>>asList(Keys.EXAM_FK, Keys.EGROUP_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Examinstance as(String alias) {
		return new Examinstance(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Examinstance rename(String name) {
		return new Examinstance(name, null);
	}
}
