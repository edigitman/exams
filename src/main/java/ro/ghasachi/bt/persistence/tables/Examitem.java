/**
 * This class is generated by jOOQ
 */
package ro.ghasachi.bt.persistence.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ro.ghasachi.bt.persistence.Keys;
import ro.ghasachi.bt.persistence.Mydb;
import ro.ghasachi.bt.persistence.tables.records.ExamitemRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Examitem extends TableImpl<ExamitemRecord> {

	private static final long serialVersionUID = 264213161;

	/**
	 * The reference instance of <code>mydb.examitem</code>
	 */
	public static final Examitem EXAMITEM = new Examitem();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ExamitemRecord> getRecordType() {
		return ExamitemRecord.class;
	}

	/**
	 * The column <code>mydb.examitem.id</code>.
	 */
	public final TableField<ExamitemRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>mydb.examitem.assertion</code>.
	 */
	public final TableField<ExamitemRecord, String> ASSERTION = createField("assertion", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

	/**
	 * The column <code>mydb.examitem.difficulty</code>.
	 */
	public final TableField<ExamitemRecord, Integer> DIFFICULTY = createField("difficulty", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mydb.examitem.points</code>.
	 */
	public final TableField<ExamitemRecord, Long> POINTS = createField("points", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>mydb.examitem.type</code>.
	 */
	public final TableField<ExamitemRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mydb.examitem.examid</code>.
	 */
	public final TableField<ExamitemRecord, Integer> EXAMID = createField("examid", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>mydb.examitem</code> table reference
	 */
	public Examitem() {
		this("examitem", null);
	}

	/**
	 * Create an aliased <code>mydb.examitem</code> table reference
	 */
	public Examitem(String alias) {
		this(alias, EXAMITEM);
	}

	private Examitem(String alias, Table<ExamitemRecord> aliased) {
		this(alias, aliased, null);
	}

	private Examitem(String alias, Table<ExamitemRecord> aliased, Field<?>[] parameters) {
		super(alias, Mydb.MYDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ExamitemRecord, Integer> getIdentity() {
		return Keys.IDENTITY_EXAMITEM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ExamitemRecord> getPrimaryKey() {
		return Keys.KEY_EXAMITEM_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ExamitemRecord>> getKeys() {
		return Arrays.<UniqueKey<ExamitemRecord>>asList(Keys.KEY_EXAMITEM_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ExamitemRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ExamitemRecord, ?>>asList(Keys.ITEM_EXAM_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Examitem as(String alias) {
		return new Examitem(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Examitem rename(String name) {
		return new Examitem(name, null);
	}
}
