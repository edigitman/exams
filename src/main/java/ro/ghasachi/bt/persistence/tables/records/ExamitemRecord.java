/**
 * This class is generated by jOOQ
 */
package ro.ghasachi.bt.persistence.tables.records;


import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import ro.ghasachi.bt.persistence.tables.Examitem;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExamitemRecord extends UpdatableRecordImpl<ExamitemRecord> implements Record6<Integer, String, Integer, Long, Integer, Integer> {

	private static final long serialVersionUID = 1072418792;

	/**
	 * Setter for <code>mydb.examitem.id</code>.
	 */
	public ExamitemRecord setId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.examitem.id</code>.
	 */
	@NotNull
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>mydb.examitem.assertion</code>.
	 */
	public ExamitemRecord setAssertion(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.examitem.assertion</code>.
	 */
	@NotNull
	@Size(max = 200)
	public String getAssertion() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mydb.examitem.difficulty</code>.
	 */
	public ExamitemRecord setDifficulty(Integer value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.examitem.difficulty</code>.
	 */
	public Integer getDifficulty() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>mydb.examitem.points</code>.
	 */
	public ExamitemRecord setPoints(Long value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.examitem.points</code>.
	 */
	public Long getPoints() {
		return (Long) getValue(3);
	}

	/**
	 * Setter for <code>mydb.examitem.type</code>.
	 */
	public ExamitemRecord setType(Integer value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.examitem.type</code>.
	 */
	public Integer getType() {
		return (Integer) getValue(4);
	}

	/**
	 * Setter for <code>mydb.examitem.examid</code>.
	 */
	public ExamitemRecord setExamid(Integer value) {
		setValue(5, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.examitem.examid</code>.
	 */
	public Integer getExamid() {
		return (Integer) getValue(5);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record6 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<Integer, String, Integer, Long, Integer, Integer> fieldsRow() {
		return (Row6) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<Integer, String, Integer, Long, Integer, Integer> valuesRow() {
		return (Row6) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Examitem.EXAMITEM.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Examitem.EXAMITEM.ASSERTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return Examitem.EXAMITEM.DIFFICULTY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field4() {
		return Examitem.EXAMITEM.POINTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field5() {
		return Examitem.EXAMITEM.TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field6() {
		return Examitem.EXAMITEM.EXAMID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getAssertion();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getDifficulty();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value4() {
		return getPoints();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value5() {
		return getType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value6() {
		return getExamid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value2(String value) {
		setAssertion(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value3(Integer value) {
		setDifficulty(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value4(Long value) {
		setPoints(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value5(Integer value) {
		setType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value6(Integer value) {
		setExamid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord values(Integer value1, String value2, Integer value3, Long value4, Integer value5, Integer value6) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ExamitemRecord
	 */
	public ExamitemRecord() {
		super(Examitem.EXAMITEM);
	}

	/**
	 * Create a detached, initialised ExamitemRecord
	 */
	public ExamitemRecord(Integer id, String assertion, Integer difficulty, Long points, Integer type, Integer examid) {
		super(Examitem.EXAMITEM);

		setValue(0, id);
		setValue(1, assertion);
		setValue(2, difficulty);
		setValue(3, points);
		setValue(4, type);
		setValue(5, examid);
	}
}
