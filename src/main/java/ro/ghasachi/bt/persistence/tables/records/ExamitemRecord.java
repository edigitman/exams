/**
 * This class is generated by jOOQ
 */
package ro.ghasachi.bt.persistence.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import ro.ghasachi.bt.persistence.tables.Examitem;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExamitemRecord extends UpdatableRecordImpl<ExamitemRecord> implements Record6<Long, String, Integer, Integer, Integer, Long> {

	private static final long serialVersionUID = -1834205404;

	/**
	 * Setter for <code>PUBLIC.EXAMITEM.ID</code>.
	 */
	public ExamitemRecord setId(Long value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.EXAMITEM.ID</code>.
	 */
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.EXAMITEM.ASSERTION</code>.
	 */
	public ExamitemRecord setAssertion(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.EXAMITEM.ASSERTION</code>.
	 */
	public String getAssertion() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>PUBLIC.EXAMITEM.DIFICULTY</code>.
	 */
	public ExamitemRecord setDificulty(Integer value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.EXAMITEM.DIFICULTY</code>.
	 */
	public Integer getDificulty() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>PUBLIC.EXAMITEM.POINTS</code>.
	 */
	public ExamitemRecord setPoints(Integer value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.EXAMITEM.POINTS</code>.
	 */
	public Integer getPoints() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>PUBLIC.EXAMITEM.TYPE</code>.
	 */
	public ExamitemRecord setType(Integer value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.EXAMITEM.TYPE</code>.
	 */
	public Integer getType() {
		return (Integer) getValue(4);
	}

	/**
	 * Setter for <code>PUBLIC.EXAMITEM.EXAM_ID</code>.
	 */
	public ExamitemRecord setExamId(Long value) {
		setValue(5, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.EXAMITEM.EXAM_ID</code>.
	 */
	public Long getExamId() {
		return (Long) getValue(5);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record6 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<Long, String, Integer, Integer, Integer, Long> fieldsRow() {
		return (Row6) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<Long, String, Integer, Integer, Integer, Long> valuesRow() {
		return (Row6) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Examitem.EXAMITEM.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Examitem.EXAMITEM.ASSERTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return Examitem.EXAMITEM.DIFICULTY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return Examitem.EXAMITEM.POINTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field5() {
		return Examitem.EXAMITEM.TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field6() {
		return Examitem.EXAMITEM.EXAM_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getAssertion();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getDificulty();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getPoints();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value5() {
		return getType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value6() {
		return getExamId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value2(String value) {
		setAssertion(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value3(Integer value) {
		setDificulty(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value4(Integer value) {
		setPoints(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value5(Integer value) {
		setType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord value6(Long value) {
		setExamId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamitemRecord values(Long value1, String value2, Integer value3, Integer value4, Integer value5, Long value6) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ExamitemRecord
	 */
	public ExamitemRecord() {
		super(Examitem.EXAMITEM);
	}

	/**
	 * Create a detached, initialised ExamitemRecord
	 */
	public ExamitemRecord(Long id, String assertion, Integer dificulty, Integer points, Integer type, Long examId) {
		super(Examitem.EXAMITEM);

		setValue(0, id);
		setValue(1, assertion);
		setValue(2, dificulty);
		setValue(3, points);
		setValue(4, type);
		setValue(5, examId);
	}
}
