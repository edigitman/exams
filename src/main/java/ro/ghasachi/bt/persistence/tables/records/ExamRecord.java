/**
 * This class is generated by jOOQ
 */
package ro.ghasachi.bt.persistence.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import ro.ghasachi.bt.persistence.tables.Exam;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExamRecord extends UpdatableRecordImpl<ExamRecord> implements Record5<Integer, String, Integer, String, Timestamp> {

	private static final long serialVersionUID = 1528708507;

	/**
	 * Setter for <code>mydb.exam.id</code>.
	 */
	public ExamRecord setId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.exam.id</code>.
	 */
	@NotNull
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>mydb.exam.name</code>.
	 */
	public ExamRecord setName(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.exam.name</code>.
	 */
	@NotNull
	@Size(max = 100)
	public String getName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mydb.exam.userid</code>.
	 */
	public ExamRecord setUserid(Integer value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.exam.userid</code>.
	 */
	@NotNull
	public Integer getUserid() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>mydb.exam.dificulty</code>.
	 */
	public ExamRecord setDificulty(String value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.exam.dificulty</code>.
	 */
	@Size(max = 10)
	public String getDificulty() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>mydb.exam.datecreated</code>.
	 */
	public ExamRecord setDatecreated(Timestamp value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>mydb.exam.datecreated</code>.
	 */
	@NotNull
	public Timestamp getDatecreated() {
		return (Timestamp) getValue(4);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Integer, String, Integer, String, Timestamp> fieldsRow() {
		return (Row5) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Integer, String, Integer, String, Timestamp> valuesRow() {
		return (Row5) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Exam.EXAM.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Exam.EXAM.NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return Exam.EXAM.USERID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Exam.EXAM.DIFICULTY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field5() {
		return Exam.EXAM.DATECREATED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getUserid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getDificulty();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value5() {
		return getDatecreated();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamRecord value2(String value) {
		setName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamRecord value3(Integer value) {
		setUserid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamRecord value4(String value) {
		setDificulty(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamRecord value5(Timestamp value) {
		setDatecreated(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamRecord values(Integer value1, String value2, Integer value3, String value4, Timestamp value5) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ExamRecord
	 */
	public ExamRecord() {
		super(Exam.EXAM);
	}

	/**
	 * Create a detached, initialised ExamRecord
	 */
	public ExamRecord(Integer id, String name, Integer userid, String dificulty, Timestamp datecreated) {
		super(Exam.EXAM);

		setValue(0, id);
		setValue(1, name);
		setValue(2, userid);
		setValue(3, dificulty);
		setValue(4, datecreated);
	}
}
